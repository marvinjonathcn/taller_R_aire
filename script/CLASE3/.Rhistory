plot_function(lista)
plot_function(lista)
dev.new()
dev.new()
Sys.Date()
new_year =as.Date("31/12/2020",format="%d/%m/%Y")
new_year
## [1] "2020-12-31"
new_year2 =as.Date("31-12-2020",format="%d-%m-%Y")
new_year2
class(new_year)
new_year =as.Date("31/12/2020",format="%d/%m/%Y")
new_year
## [1] "2020-12-31"
new_year2 =as.Date("31-12-2020",format="%d-%m-%Y")
new_year2
class(new_year)
new_year =as.POSIXct("01/12/2020",format="%d/%m/%Y")
new_year
format(new_year, format="%m/%Y")
a <- format(new_year, format="%m/%Y")
a
a
class(a)
class(new_year)
a <- format(new_year, format="%Y")
a
a <- format(new_year, format="%d")
b <- format(new_year, format="%m")
a
b
install.packages("MVN")
library(MVN)
result <- mvOutlier(df, qqplot = TRUE, method = "quan")
install.packages("mvoutlier")
result <- mvOutlier(df, qqplot = TRUE, method = "quan")
library(mvoutlier)
result <- mvOutlier(df, qqplot = TRUE, method = "quan")
data(iris)
df <- iris[, 1:4] #only taking the four numeric fields
library(MVN)
result <- mvOutlier(df, qqplot = TRUE, method = "quan") #non-adjusted
MVN:::mvOutlier()
result <- MVN:::mvOutlier(df, qqplot = TRUE, method = "quan")
result <- MVN:::mvOutlier(df, qqplot = TRUE, method = "quan")
result
result <- MVN:::mvOutlier(df, qqplot = TRUE, method = "adj.quan")
result <- MVN:::mvOutlier(df, qqplot = TRUE, method = "adj")
result <- MVN:::mvOutlier(df, qqplot = TRUE, method = "adj",label = TRUE)
setosa = iris[1:50, 1:3] # Iris data only for setosa and three variables
result = mvOutlier(setosa, qqplot = TRUE, method = "quan", label = TRUE)
setosa = iris[1:50, 1:3] # Iris data only for setosa and three variables
result = MVN:::mvOutlier(setosa, qqplot = TRUE, method = "quan", label = TRUE)
View(df)
library(ggplot2)
library(httr)
library(DataExplorer)
r <- GET("https://www.senamhi.gob.pe/site/sea/www/site/sea/graficas/dato_hora.php?estacion=112194&cont=N_PM25&f1=01/01/2020&f2=31/12/2020")
s <- content(r, "text")
s_split1 <- strsplit(s, 'radius: 0,')[[1]][3]
s_split2 <- strsplit(s_split1, "\\[")[[1]][2]
s_split3 <- strsplit(s_split2, ',]')[[1]][1]
s2_split1 <- strsplit(s, 'xAxis: \\{')[[1]][2]
s2_split2 <- strsplit(s2_split1, "\\[")[[1]][2]
s2_split3 <- strsplit(s2_split2, ',]')[[1]][1]
values_df <- data.frame()
values_o <- strsplit(s_split3, ",")
for (i in 1:length(values_o[[1]])){
values_df[i,1] <- as.numeric(values_o[[1]][i])
}
date_df <- data.frame()
date_o <- strsplit(s2_split3, ",")
for (i in 1:length(date_o[[1]])){
date_1 <- as.character(date_o[[1]][i])
date_2 <- substr(date_1, 2, 16 )
date_df[i,1] <- date_2
}
df <- data.frame(date_df[,1], values_df[,1])
names(df) <- c("date", "PM25")
# ASIGNAR EL FORMATO DE FECHA
df$date <- as.POSIXct(as.character(df$date), format = "%d/%m/%Y%H:%M")
View(df)
as.Date("03-04-2021")
as.Date("2021-04-20")
as.Date("2021-040-20")
as.Date("2021-40-20")
as.Date("2021-04-20")
as.Date("2021-04-20")
as.Date("2021-04-20") -1
library(ggplot2)
library(RSelenium)
library(DataExplorer)
library(tidyr)
library(ggplot2)
library(RSelenium)
library(DataExplorer)
library(tidyr)
library(ggplot2)
library(RSelenium)
library(DataExplorer)
library(tidyr)
library(cdfdf)
library(ggplot2)
library(RSelenium)
library(DataExplorer)
library(tidyr)
setwd("D:/PROYECTOS-R/taller_R_aire/script/CLASE3")
setwd("D:/PROYECTOS-R/taller_R_aire/script/CLASE3")
library(RSelenium)
binman::list_versions("chromedriver")
download_senamhi_data <- function(url_list) {
# NUMERO ALEATORIO DE PUERTO
port <- as.integer(runif(1, min = 5000, max = 6000))
# EJECUTAMOS EL DRIVER DE GOOGLE CHROME
rD <- rsDriver(port = port, browser = "chrome",
chromever = "96.0.4664.35")
remDrv <- rD$client
for (url in url_list){
# INGRESAR AL URL
remDrv$navigate(url)
# ENCONTRAR EL BOTON DE DESCARGA
down_button <- remDrv$findElement(using = "id", "export2")
down_button$clickElement()
}
# CERRAR LA SESION ACTUAL
remDrv$close()
rD$server$stop()
rm(rD, remDrv)
gc()
}
list_url <- list()
for (i in 1:9) {
list_url[i] = paste("https://www.senamhi.gob.pe//mapas/mapa-estaciones-2/_dato_esta_tipo02.php?estaciones=112181&CBOFiltro=20200",
i, "&t_e=M&estado=AUTOMATICA&cod_old=&cate_esta=EMA&alt=117", sep = "")
}
for (i in 10:12) {
list_url[i] = paste("https://www.senamhi.gob.pe//mapas/mapa-estaciones-2/_dato_esta_tipo02.php?estaciones=112181&CBOFiltro=2020",
i, "&t_e=M&estado=AUTOMATICA&cod_old=&cate_esta=EMA&alt=117", sep = "")
}
View(list_url)
download_senamhi_data(list_url)
binman::list_versions("chromedriver")
wd_path <- "D:/PROYECTOS-R/taller_R_aire/script/CLASE3"
wd_path <- "D:/PROYECTOS-R/taller_R_aire/script/CLASE3"
myfiles <- list.files(path=wd_path, pattern="*.csv", full.names=TRUE)
wd_path <- "D:/PROYECTOS-R/taller_R_aire/script/CLASE3"
myfiles <- list.files(path=wd_path, pattern="*.csv", full.names=TRUE)
df_list <- list()
for (i in 1:length(myfiles)){
df_list[[i]] <- read.table(myfiles[i], sep = ",", header = T ,
skip = 10 , stringsAsFactors = F,
na.strings = "S/D")
}
View(df_list)
df <- Reduce(function(...) merge(... , all=TRUE), df_list)
View(df)
df$date = as.POSIXct(paste(df[,1], df[,2], sep = " "),
format = "%Y/%m/%d %H:%M")
View(df)
View(df)
df <- df[,-c(1,2)]
View(df)
View(df)
df <- df[, c(6,1:5)]
View(df)
colnames(df) <- c("date", "TEMP", "PP", "HUM", "DIR_V", "VEL_V")
View(df)
View(df)
library(tidyr)
View(df)
df <- df %>%
complete(date = seq(min(date), max(date), by = "1 hour"),
fill = list(VALOR = NA))
View(df)
View(df)
View(df)
View(df)
View(df)
getwd()
View(df)
View(df)
library(DataExplorer)
library(DataExplorer)
# VISUALIZAR LA ESCTRUCTURA DE NUESTRA DATA
plot_str(df)
introduce(df)
plot_intro(df)
View(df)
# VALORES FALTANTES O MISSING
plot_missing(df)
profile_missing(df)
# HISTOGRAMA
dev.new()
plot_histogram(df)
# ANALISIS DE CORRELACIÓN
plot_correlation(na.omit(df))
ggplot(stack(df), aes(x = ind, y = values)) +
geom_boxplot()
ggplot(df, aes(x = date, y = HUM)) +
geom_boxplot()
# SCATTER PLOT
library(reshape2)
df_sp <- melt(df[,c(1,2,4)], id.vars = 'date', variable.name = 'Variables')
ggplot(df_sp, aes(date,value)) +
geom_line() +
geom_smooth() +
facet_grid(Variables ~ .)
ggplot(df, aes(date,PP)) +
geom_line() +
geom_smooth()
View(df)
summary(df)
# COMPLETAR VALORES NA MEDIANTE IMPUTACION MULTIPLE
library(mice)
# COMPLETAR VALORES NA MEDIANTE IMPUTACION MULTIPLE
library(mice)
df_mice <- mice(df,m=5,maxit=10,meth='cart',seed=500)
summary(df_mice)
df_complete <- complete(df_mice,1)
View(df_complete)
summary(df)
summary(df_complete)
# ELIMINAR VALORES OUTLIERS UNIVARIABLES MEDIANTE BOXPLOT
boxplot.stats(df$VEL_V)$out
View(df)
df_2 <- df
df_2$date <- df_2$date - 1
View(df_2)
View(df)
df_2$date <- df_2$date - "1 day"
df_2 <- df
df_2$date <- df_2$date - "1 day"
df_2$date <- df_2$date - "01:00"
df_2$date <- df_2$date - 01:00
df_2 <- df
df_2$date <- df_2$date - 01:00
View(df_2)
df_2 <- df
View(df_2)
df_2$date <- df_2$date - 01:00:00
df_2$date <- df_2$date - 01:00
View(df)
View(df_2)
View(df)
df_2 <- df
View(df_2)
View(df)
View(df)
View(df_2)
View(df)
df_2$date <- seq(as.POSIXct("2019-12-31 23:00", format = "Y%-%m-%d %H:%M"),
as.POSIXct("2020-12-31 22:00", format = "Y%-%m-%d %H:%M"),
by = "1 hour")
as.POSIXct("2019-12-31 23:00", format = "Y%-%m-%d %H:%M")
df_2$date <- seq(as.POSIXct("2019-12-31 23:00", format = "%Y-%m-%d %H:%M"),
as.POSIXct("2020-12-31 22:00", format = "%Y-%m-%d %H:%M"),
by = "1 hour")
View(df_2)
View(df)
df_2 <- df
df_2$date <- seq(as.POSIXct("2019-12-31 23:00", format = "%Y-%m-%d %H:%M"),
as.POSIXct("2020-12-31 22:00", format = "%Y-%m-%d %H:%M"),
by = "1 hour")
View(df_2)
data_day <- setDT(df_2)[,lapply(.SD, function(x) if(length(na.omit(x)) >= 18)
(mean(x, na.rm = T)) else NA_real_) ,
by = .(day = format(date, '%d/%m/%Y'))]
library(data.table)
library(data.table)
data_day <- setDT(df_2)[,lapply(.SD, function(x) if(length(na.omit(x)) >= 18)
(mean(x, na.rm = T)) else NA_real_) ,
by = .(day = format(date, '%d/%m/%Y'))]
View(data_day)
View(df)
View(df_2)
View(data_day)
data_day_mean <- setDT(df_2)[,lapply(.SD, function(x) if(length(na.omit(x)) >= 18)
(mean(x, na.rm = T)) else NA_real_) ,
by = .(day = format(date, '%d/%m/%Y'))]
data_day_sum <- setDT(df_2)[,lapply(.SD, function(x) if(length(na.omit(x)) >= 18)
(sum(x, na.rm = T)) else NA_real_) ,
by = .(day = format(date, '%d/%m/%Y'))]
data_day_sum <- setDT(df_2)[,lapply(.SD, function(x) if(length(na.omit(x)) >= 18)
(sum(x)) else NA_real_) ,
by = .(day = format(date, '%d/%m/%Y'))]
View(df_2)
str(df_2)
data_day_sum <- setDT(df_2)[,lapply(.SD, function(x) if(length(na.omit(x)) >= 18)
(sum(x)) else NA_real_) ,
by = .(day = format(date, '%d/%m/%Y'))]
str(df_2)
df_2$HUM <- as.numeric(df_2$HUM)
str(sf_2)
str(df_2)
df_2$DIR_V <- as.numeric(df_2$DIR_V)
str(df_2)
data_day_sum <- setDT(df_2)[,lapply(.SD, function(x) if(length(na.omit(x)) >= 18)
(sum(x)) else NA_real_) ,
by = .(day = format(date, '%d/%m/%Y'))]
View(data_day_mean)
View(data_day)
View(data_day_sum)
data_month_mean <- setDT(df_2)[,lapply(.SD, function(x) if(length(na.omit(x)) >= 23)
(mean(x, na.rm = T)) else NA_real_) ,
by = .(month = format(date, '%m/%Y'))]
View(data_month_mean)
View(df_2)
library(openair)
# GRAFICAMOS LAS SERIES DE TIEMPO
timePlot(df, pollutant = c("TEMP", "PP", "HUM"),
name.pol = c("TEMPERATURA", "PRECIPITACION", "HUMEDAD"),
smooth = T,
xlab = "Tiempo", ylab = "Valores",
main = "DATOS HIDROMETEOROLÓGICOS DE LA ESTACION CAMPO DE MARTE - 2020",
avg.time = "1 day")
# GRAFICAMOS LAS SERIES DE TIEMPO
timePlot(df, pollutant = c("TEMP", "PP", "HUM"),
name.pol = c("TEMPERATURA", "PRECIPITACION", "HUMEDAD"),
smooth = T,
xlab = "Tiempo", ylab = "Valores",
main = "DATOS HIDROMETEOROLÓGICOS DE LA ESTACION CAMPO DE MARTE - 2020",
avg.time = "1 month")
# GRAFICAMOS LAS SERIES DE TIEMPO
timePlot(df, pollutant = c("TEMP", "PP", "HUM"),
name.pol = c("TEMPERATURA", "PRECIPITACION", "HUMEDAD"),
smooth = T,
xlab = "Tiempo", ylab = "Valores",
main = "DATOS HIDROMETEOROLÓGICOS DE LA ESTACION CAMPO DE MARTE - 2020",
avg.time = "1 day")
# GRAFICAMOS LAS SERIES DE TIEMPO
timePlot(df, pollutant = c("TEMP", "PP", "HUM"),
name.pol = c("TEMPERATURA", "PRECIPITACION", "HUMEDAD"),
smooth = T,
xlab = "Tiempo", ylab = "Valores",
main = "DATOS HIDROMETEOROLÓGICOS DE LA ESTACION CAMPO DE MARTE - 2020",
avg.time = "1 hour")
# GRAFICAMOS LA CORRELACION ENTRE VARIABLES
pairs(df,
lower.panel = panel.smooth,
upper.panel = NULL,
col = "skyblue3")
View(df_2)
View(df)
colnames(df)[5] <- "wd"
colnames(df)[6] <- "ws"
View(df)
# GRAFICAMOS LAS ROSAS DE VIENTO
windRose(df)
windRose(df, type = "season")
windRose(df, type = "month")
windRose(df, type = "week")
timePlot(df, pollutant = c("TEMP", "HUM"),
windflow = list(scale = 0.1, lwd = 2, col = "darkcyan"),
lwd = 3, group = FALSE,
xlab = "Tiempo", ylab = "Valores",
cols = c("red", "blue"),
main = "DATOS HIDROMETEOROLÓGICOS DE LA ESTACION VON HUMBOLDT - 2020",
avg.time = "1 month")
# GRAFICAMOS LAS SERIES DE TIEMPO CON LOS DATOS DE VIENTO INCLUIDOS
timePlot(df, pollutant = c("TEMP"),
windflow = list(scale = 0.1, lwd = 2, col = "darkcyan"),
lwd = 3, group = FALSE,
xlab = "Tiempo", ylab = "Valores",
cols = c("red", "blue"),
main = "DATOS HIDROMETEOROLÓGICOS DE LA ESTACION VON HUMBOLDT - 2020",
avg.time = "1 month")
# GRAFICAMOS LAS SERIES DE TIEMPO CON LOS DATOS DE VIENTO INCLUIDOS
timePlot(df, pollutant = c("HUM"),
windflow = list(scale = 0.1, lwd = 2, col = "darkcyan"),
lwd = 3, group = FALSE,
xlab = "Tiempo", ylab = "Valores",
cols = c("red", "blue"),
main = "DATOS HIDROMETEOROLÓGICOS DE LA ESTACION VON HUMBOLDT - 2020",
avg.time = "1 month")
# GRAFICAMOS LA VARIACION TEMPORAL DE LA TEMPERATURA
timeVariation(df, pollutant = c("TEMP","HUM"))
# GRAFICAMOS UN CALENDARIO PARA EVALUAR CADA VARIABLE
calendarPlot(df, pollutant = "TEMP", year = 2020)
calendarPlot(df, pollutant = "PP", year = 2020, cols = "Blues")
calendarPlot(df, pollutant = "HUM", year = 2020, annotate = "ws")
calendarPlot(df, pollutant = "TEMP", year = 2020,
breaks = c(-20, 0, 10, 20, 25, 100),
labels = c("Muy frio", "Frio", "Templado", "Calido", "Muy calido"),
cols = "increment", statistic = "max")
#################################
# AUTOMATIZACION Y PROCESAMIENTO DE DATOS DE CALIDAD DE AIRE DEL SENAMHI
# CURSO: ANALISIS DE DATOS DE CALIDAD DE AIRE CON R Y RSTUDIO
# Marvin J. Quispe Sedano
# Email: marvinjqs@gmail.com
#################################
#---------------------------------------------------------
# Para limpiar la consola:
# TeclaS :  Ctrl + L
# Para limpiar el workspace:
rm(list = ls())
###############
#  Paquetes   #
###############
library(ggplot2)
library(httr)
library(DataExplorer)
#################################
# AUTOMATIZACION Y PROCESAMIENTO DE DATOS DE CALIDAD DE AIRE DEL SENAMHI
# CURSO: ANALISIS DE DATOS DE CALIDAD DE AIRE CON R Y RSTUDIO
# Marvin J. Quispe Sedano
# Email: marvinjqs@gmail.com
#################################
#---------------------------------------------------------
# Para limpiar la consola:
# TeclaS :  Ctrl + L
# Para limpiar el workspace:
rm(list = ls())
###############
#  Paquetes   #
###############
library(ggplot2)
library(httr)
library(DataExplorer)
library(ggplot2)
library(httr)
library(DataExplorer)
library(ggplot2)
library(httr)
library(DataExplorer)
library(ggplot2)
library(httr)
library(DataExplorer)
library(ggplot2)
library(httr)
library(DataExplorer)
r <- GET("https://www.senamhi.gob.pe/site/sea/www/site/sea/graficas/dato_hora.php?estacion=112194&cont=N_PM25&f1=01/01/2020&f2=31/12/2020")
s <- content(r, "text")
S
s
s_split1 <- strsplit(s, 'radius: 0,')[[1]][3]
s_split2 <- strsplit(s_split1, "\\[")[[1]][2]
s_split1
s_split1 <- strsplit(s, 'radius: 0,')[[1]][3]
s_split2 <- strsplit(s_split1, "\\[")[[1]][2]
s_split3 <- strsplit(s_split2, ',]')[[1]][1]
s2_split1 <- strsplit(s, 'xAxis: \\{')[[1]][2]
s2_split2 <- strsplit(s2_split1, "\\[")[[1]][2]
s2_split3 <- strsplit(s2_split2, ',]')[[1]][1]
values_df <- data.frame()
values_o <- strsplit(s_split3, ",")
for (i in 1:length(values_o[[1]])){
values_df[i,1] <- as.numeric(values_o[[1]][i])
}
View(values_o)
date_df <- data.frame()
date_o <- strsplit(s2_split3, ",")
for (i in 1:length(date_o[[1]])){
date_1 <- as.character(date_o[[1]][i])
date_2 <- substr(date_1, 2, 16 )
date_df[i,1] <- date_2
}
df <- data.frame(date_df[,1], values_df[,1])
names(df) <- c("date", "PM25")
View(df)
View(df)
View(df)
# ASIGNAR EL FORMATO DE FECHA
df$date <- as.POSIXct(as.character(df$date), format = "%d/%m/%Y%H:%M")
View(df)
plot_intro(df)
View(df)
path_wd <- readClipboard()
setwd(path_wd)
getwd()
path_wd <- readClipboard()
setwd(path_wd)
getwd()
path_wd <- readClipboard()
setwd(path_wd)
gwtwd()
getwd()
path_wd <- readClipboard()
setwd(path_wd)
getwd()
df1 <- read.table("air-data-campodm.csv", header = T,
stringsAsFactors = F, sep = ",")
df2 <- read.table("data-meteo-campodm.csv", header = T,
stringsAsFactors = F, sep = ",")
df2 <- read.table("data-meteo-campodm.csv", header = T,
stringsAsFactors = F, sep = ",")
# MERGE A LOS DF
df <- merge(df1, df2, by = "date")
View(df)
# CONVERTIR FECHAS
df$date <- as.POSIXct(df$date, format = "%Y-%m-%d %H:%M:%S")
df <- df %>%
complete(date = seq(min(date), max(date), by = "1 hour"),
fill = list(VALOR = NA))
View(df)
library(caret)
library(klaR)
timePlot(df, pollutant = "PM25",
ref.y = list(h = 50, lty = 5),
avg.time = "1 day")
View(df)
pollutionRose(mydata, pollutant = "PM25")
pollutionRose(mydata, pollutant = "PM25")
pollutionRose(df, pollutant = "PM25")
pollutionRose(df, pollutant = "PM25")
View(df2)
str(df)
colnames[6] <- "wd"
colnames[7] <- "wd"
colnames(df)[6] <- "wd"
colnames(df)[7] <- "ws"
str(df)
pollutionRose(df, pollutant = "PM25")
